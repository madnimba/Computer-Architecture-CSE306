
ShowRegisterContent.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000608  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056c  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000271  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000336  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000046  00000000  00000000  000012d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include <util/delay.h>

int main(){
	
	MCUCSR|=(1<<JTD);
  6c:	84 b7       	in	r24, 0x34	; 52
  6e:	80 68       	ori	r24, 0x80	; 128
  70:	84 bf       	out	0x34, r24	; 52
	MCUCSR|=(1<<JTD);
  72:	84 b7       	in	r24, 0x34	; 52
  74:	80 68       	ori	r24, 0x80	; 128
  76:	84 bf       	out	0x34, r24	; 52

	DDRA = 0x00; // Scan queried register address (A2-A0)
  78:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0x0F; // Send address to big boss (B3-B0)
  7a:	8f e0       	ldi	r24, 0x0F	; 15
  7c:	87 bb       	out	0x17, r24	; 23
	DDRC = 0x00; // Receive data from big boss (C3-C0)
  7e:	14 ba       	out	0x14, r1	; 20
	DDRD = 0xFF; // Show register address (D7-D4) and data (D3-D0)
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	81 bb       	out	0x11, r24	; 17
	
	unsigned char address;
	unsigned char data;

	while(1){
		address = PINA & 0x07;			// Scan queried register address
  84:	89 b3       	in	r24, 0x19	; 25
  86:	98 2f       	mov	r25, r24
  88:	97 70       	andi	r25, 0x07	; 7
		PORTB = address;				// Send address to big boss
  8a:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	e9 ef       	ldi	r30, 0xF9	; 249
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <main+0x24>
  94:	00 c0       	rjmp	.+0      	; 0x96 <main+0x2a>
  96:	00 00       	nop
		_delay_ms(1);					// Wait a moment
		data = PINC & 0x0F;				// Receive data from big boss
  98:	83 b3       	in	r24, 0x13	; 19
  9a:	28 2f       	mov	r18, r24
  9c:	2f 70       	andi	r18, 0x0F	; 15
		PORTD = (address << 4) | data;	// Show register address and data
  9e:	f0 e1       	ldi	r31, 0x10	; 16
  a0:	9f 9f       	mul	r25, r31
  a2:	c0 01       	movw	r24, r0
  a4:	11 24       	eor	r1, r1
  a6:	82 2b       	or	r24, r18
  a8:	82 bb       	out	0x12, r24	; 18
  aa:	ec cf       	rjmp	.-40     	; 0x84 <main+0x18>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>
