
PC_InstructionMem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000088  00800060  000002b0  00000344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000e8  008000e8  000003cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000807  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005cf  00000000  00000000  00000c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e3  00000000  00000000  0000122e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000038  00000000  00000000  00001614  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000378  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000034e  00000000  00000000  000019c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001d12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3e       	cpi	r26, 0xE8	; 232
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 ee       	ldi	r26, 0xE8	; 232
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3e       	cpi	r26, 0xEA	; 234
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <avr/interrupt.h>

volatile unsigned int counter;

int main()
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	c8 58       	subi	r28, 0x88	; 136
  9c:	d1 09       	sbc	r29, r1
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	f8 94       	cli
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	cd bf       	out	0x3d, r28	; 61
	MCUCSR|=(1<<JTD);
  a8:	84 b7       	in	r24, 0x34	; 52
  aa:	80 68       	ori	r24, 0x80	; 128
  ac:	84 bf       	out	0x34, r24	; 52
	MCUCSR|=(1<<JTD);
  ae:	84 b7       	in	r24, 0x34	; 52
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	84 bf       	out	0x34, r24	; 52
	
  DDRD = 0b01000000; // D7 -> clkin D6 ->clkout D5 -> feedback D0 -> ZF
  b4:	80 e4       	ldi	r24, 0x40	; 64
  b6:	81 bb       	out	0x11, r24	; 17
  PORTD = 0x00;
  b8:	12 ba       	out	0x12, r1	; 18
  DDRA = 0xFF; //lower 8 bit output
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	8a bb       	out	0x1a, r24	; 26
  DDRB = 0xFF; // higher 8 bit output
  be:	87 bb       	out	0x17, r24	; 23
  
  DDRC = 0xFF; 
  c0:	84 bb       	out	0x14, r24	; 20

  unsigned int instruction[] = {0x8503, 0x8518, 0xE102, 0x0103, 0xC22A, 0x850F, 0xA009, 0x5005, 0x8511, 0x7101, 0x2112, 0x853A, 0xB131, 0x3142, 0x3441, 0x8538, 0x9341, 0x8500, 0x1010, 0x8122, 0x1022, 0x8227, 0x1025, 0x4042, 0x4045, 0x4040, 0x8504, 0x8512, 0xD015, 0x8534, 0x8520, 0xD032, 0x8529, 0x8221, 0x8221, 0x620E, 0xC222, 0x6214, 0x850F, 0xA00A, 0x8515, 0x8540, 0xC001, 0xD013, 0x8441, 0xF2A0, 0x8540, 0x850A, 0x8512, 0x8528, 0x8537, 0x1600, 0xC661, 0x1610, 0xC661, 0x1620, 0xC661, 0x8661, 0x4600, 0x8661, 0x4620, 0x1630, 0xC661, 0x8661, 0x4600, 0x8661, 0x4630, 0x800F};
  c2:	88 e8       	ldi	r24, 0x88	; 136
  c4:	e0 e6       	ldi	r30, 0x60	; 96
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	de 01       	movw	r26, r28
  ca:	11 96       	adiw	r26, 0x01	; 1
  cc:	01 90       	ld	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	8a 95       	dec	r24
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x3a>
  //unsigned char clock = PIND & 0x80, ZF = PIND & 0x01;
  
  counter = 0;
  d4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__data_end+0x1>
  d8:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__data_end>
  
  int length = sizeof(instruction)/sizeof(unsigned int);
  
  while(counter < length)
  dc:	d3 c0       	rjmp	.+422    	; 0x284 <main+0x1f2>
  {
    while(!(PIND & 0x80));
  de:	87 9b       	sbis	0x10, 7	; 16
  e0:	fe cf       	rjmp	.-4      	; 0xde <main+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	8f e4       	ldi	r24, 0x4F	; 79
  e4:	93 ec       	ldi	r25, 0xC3	; 195
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <main+0x54>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x5a>
  ec:	00 00       	nop
    _delay_ms(200);
    unsigned int output = instruction[counter];
  ee:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
  f2:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
  f6:	ee 0f       	add	r30, r30
  f8:	ff 1f       	adc	r31, r31
  fa:	a1 e0       	ldi	r26, 0x01	; 1
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	ac 0f       	add	r26, r28
 100:	bd 1f       	adc	r27, r29
 102:	ea 0f       	add	r30, r26
 104:	fb 1f       	adc	r31, r27
 106:	20 81       	ld	r18, Z
 108:	31 81       	ldd	r19, Z+1	; 0x01
    
    PORTA = (unsigned char)(output & 0x00FF);
 10a:	2b bb       	out	0x1b, r18	; 27
    PORTB = (unsigned char)((output & 0xFF00)>>8);
 10c:	38 bb       	out	0x18, r19	; 24
   
    unsigned int opcode = (output & 0xF000)>>12;
 10e:	a9 01       	movw	r20, r18
 110:	45 2f       	mov	r20, r21
 112:	55 27       	eor	r21, r21
 114:	42 95       	swap	r20
 116:	4f 70       	andi	r20, 0x0F	; 15
    unsigned int jump_address = (output & 0x0FF0)>>4;
 118:	c9 01       	movw	r24, r18
 11a:	80 7f       	andi	r24, 0xF0	; 240
 11c:	9f 70       	andi	r25, 0x0F	; 15
 11e:	bc 01       	movw	r22, r24
 120:	72 95       	swap	r23
 122:	62 95       	swap	r22
 124:	6f 70       	andi	r22, 0x0F	; 15
 126:	67 27       	eor	r22, r23
 128:	7f 70       	andi	r23, 0x0F	; 15
 12a:	67 27       	eor	r22, r23
    unsigned int offset_address = (output & 0x000F);
 12c:	f9 01       	movw	r30, r18
 12e:	ef 70       	andi	r30, 0x0F	; 15
 130:	ff 27       	eor	r31, r31
    
    counter++;
 132:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__data_end>
 136:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <__data_end+0x1>
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__data_end+0x1>
 140:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__data_end>
    
    if(opcode == 0x000F) // jump check
 144:	4f 30       	cpi	r20, 0x0F	; 15
 146:	51 05       	cpc	r21, r1
 148:	71 f4       	brne	.+28     	; 0x166 <main+0xd4>
    {  
		PORTD = 0x40; // sending clk
 14a:	80 e4       	ldi	r24, 0x40	; 64
 14c:	82 bb       	out	0x12, r24	; 18
 14e:	83 ef       	ldi	r24, 0xF3	; 243
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <main+0xc0>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0xc6>
 158:	00 00       	nop
		_delay_ms(2);
		PORTD = 0x00;
 15a:	12 ba       	out	0x12, r1	; 18
      counter = jump_address;
 15c:	70 93 e9 00 	sts	0x00E9, r23	; 0x8000e9 <__data_end+0x1>
 160:	60 93 e8 00 	sts	0x00E8, r22	; 0x8000e8 <__data_end>
 164:	8f c0       	rjmp	.+286    	; 0x284 <main+0x1f2>
    }
    else if(opcode == 0x000D) //beq check
 166:	4d 30       	cpi	r20, 0x0D	; 13
 168:	51 05       	cpc	r21, r1
 16a:	f1 f5       	brne	.+124    	; 0x1e8 <main+0x156>
    {
		unsigned int temp = 0;
		PORTD = 0x40; // sending clk
 16c:	80 e4       	ldi	r24, 0x40	; 64
 16e:	82 bb       	out	0x12, r24	; 18
 170:	a3 ef       	ldi	r26, 0xF3	; 243
 172:	b1 e0       	ldi	r27, 0x01	; 1
 174:	11 97       	sbiw	r26, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <main+0xe2>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0xe8>
 17a:	00 00       	nop
		_delay_ms(2);
		PORTD = 0x00;
 17c:	12 ba       	out	0x12, r1	; 18
		PORTD = 0x00;
      counter = jump_address;
    }
    else if(opcode == 0x000D) //beq check
    {
		unsigned int temp = 0;
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
		PORTD = 0x40; // sending clk
		_delay_ms(2);
		PORTD = 0x00;
		while(!(PIND & 0x20)){temp = PIND;}
 182:	01 c0       	rjmp	.+2      	; 0x186 <main+0xf4>
 184:	80 b3       	in	r24, 0x10	; 16
 186:	85 9b       	sbis	0x10, 5	; 16
 188:	fd cf       	rjmp	.-6      	; 0x184 <main+0xf2>
 18a:	a3 ef       	ldi	r26, 0xF3	; 243
 18c:	b1 e0       	ldi	r27, 0x01	; 1
 18e:	11 97       	sbiw	r26, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <main+0xfc>
 192:	00 c0       	rjmp	.+0      	; 0x194 <main+0x102>
 194:	00 00       	nop
		_delay_ms(2);
		//if (PIND & 0x01)
		if(temp & 0x01)
 196:	80 ff       	sbrs	r24, 0
 198:	75 c0       	rjmp	.+234    	; 0x284 <main+0x1f2>
		{
			if(offset_address & 0x08)
 19a:	23 ff       	sbrs	r18, 3
 19c:	0c c0       	rjmp	.+24     	; 0x1b6 <main+0x124>
			{
				counter -= (16 - offset_address);
 19e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__data_end>
 1a2:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <__data_end+0x1>
 1a6:	e8 0f       	add	r30, r24
 1a8:	f9 1f       	adc	r31, r25
 1aa:	70 97       	sbiw	r30, 0x10	; 16
 1ac:	f0 93 e9 00 	sts	0x00E9, r31	; 0x8000e9 <__data_end+0x1>
 1b0:	e0 93 e8 00 	sts	0x00E8, r30	; 0x8000e8 <__data_end>
 1b4:	0a c0       	rjmp	.+20     	; 0x1ca <main+0x138>
			}
			else counter += offset_address;
 1b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__data_end>
 1ba:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <__data_end+0x1>
 1be:	e8 0f       	add	r30, r24
 1c0:	f9 1f       	adc	r31, r25
 1c2:	f0 93 e9 00 	sts	0x00E9, r31	; 0x8000e9 <__data_end+0x1>
 1c6:	e0 93 e8 00 	sts	0x00E8, r30	; 0x8000e8 <__data_end>
			
			if (counter >= length || counter < 0) PORTC = 0xF0;
 1ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__data_end>
 1ce:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <__data_end+0x1>
 1d2:	84 34       	cpi	r24, 0x44	; 68
 1d4:	91 05       	cpc	r25, r1
 1d6:	28 f4       	brcc	.+10     	; 0x1e2 <main+0x150>
 1d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__data_end>
 1dc:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <__data_end+0x1>
 1e0:	51 c0       	rjmp	.+162    	; 0x284 <main+0x1f2>
 1e2:	80 ef       	ldi	r24, 0xF0	; 240
 1e4:	85 bb       	out	0x15, r24	; 21
 1e6:	4e c0       	rjmp	.+156    	; 0x284 <main+0x1f2>
		}
    }
    else if(opcode == 0x0006) //bneq check
 1e8:	46 30       	cpi	r20, 0x06	; 6
 1ea:	51 05       	cpc	r21, r1
 1ec:	09 f0       	breq	.+2      	; 0x1f0 <main+0x15e>
 1ee:	41 c0       	rjmp	.+130    	; 0x272 <main+0x1e0>
    {
		unsigned char temp = 0;
		PORTD = 0x40; // sending clk
 1f0:	80 e4       	ldi	r24, 0x40	; 64
 1f2:	82 bb       	out	0x12, r24	; 18
 1f4:	83 ef       	ldi	r24, 0xF3	; 243
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <main+0x166>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <main+0x16c>
 1fe:	00 00       	nop
		_delay_ms(2);
		PORTD = 0x00;
 200:	12 ba       	out	0x12, r1	; 18
			if (counter >= length || counter < 0) PORTC = 0xF0;
		}
    }
    else if(opcode == 0x0006) //bneq check
    {
		unsigned char temp = 0;
 202:	80 e0       	ldi	r24, 0x00	; 0
		PORTD = 0x40; // sending clk
		_delay_ms(2);
		PORTD = 0x00;
      while(!(PIND & 0x20)){temp = 0x01 & PIND;}
 204:	02 c0       	rjmp	.+4      	; 0x20a <main+0x178>
 206:	80 b3       	in	r24, 0x10	; 16
 208:	81 70       	andi	r24, 0x01	; 1
 20a:	85 9b       	sbis	0x10, 5	; 16
 20c:	fc cf       	rjmp	.-8      	; 0x206 <main+0x174>
 20e:	a3 ef       	ldi	r26, 0xF3	; 243
 210:	b1 e0       	ldi	r27, 0x01	; 1
 212:	11 97       	sbiw	r26, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <main+0x180>
 216:	00 c0       	rjmp	.+0      	; 0x218 <main+0x186>
 218:	00 00       	nop
      _delay_ms(2);
      //if (!(PIND & 0x01))
      if(!(temp & 0x01))
 21a:	81 70       	andi	r24, 0x01	; 1
 21c:	39 f5       	brne	.+78     	; 0x26c <main+0x1da>
      {
	      if(offset_address & 0x08)
 21e:	23 ff       	sbrs	r18, 3
 220:	0c c0       	rjmp	.+24     	; 0x23a <main+0x1a8>
	      {
		      counter -= (16 - offset_address);
 222:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__data_end>
 226:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <__data_end+0x1>
 22a:	e8 0f       	add	r30, r24
 22c:	f9 1f       	adc	r31, r25
 22e:	70 97       	sbiw	r30, 0x10	; 16
 230:	f0 93 e9 00 	sts	0x00E9, r31	; 0x8000e9 <__data_end+0x1>
 234:	e0 93 e8 00 	sts	0x00E8, r30	; 0x8000e8 <__data_end>
 238:	0a c0       	rjmp	.+20     	; 0x24e <main+0x1bc>
	      }
	      else counter += offset_address;
 23a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__data_end>
 23e:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <__data_end+0x1>
 242:	e8 0f       	add	r30, r24
 244:	f9 1f       	adc	r31, r25
 246:	f0 93 e9 00 	sts	0x00E9, r31	; 0x8000e9 <__data_end+0x1>
 24a:	e0 93 e8 00 	sts	0x00E8, r30	; 0x8000e8 <__data_end>
		  
		  if (counter >= length || counter < 0) PORTC = 0xF0;
 24e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__data_end>
 252:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <__data_end+0x1>
 256:	84 34       	cpi	r24, 0x44	; 68
 258:	91 05       	cpc	r25, r1
 25a:	28 f4       	brcc	.+10     	; 0x266 <main+0x1d4>
 25c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__data_end>
 260:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <__data_end+0x1>
 264:	0f c0       	rjmp	.+30     	; 0x284 <main+0x1f2>
 266:	80 ef       	ldi	r24, 0xF0	; 240
 268:	85 bb       	out	0x15, r24	; 21
 26a:	0c c0       	rjmp	.+24     	; 0x284 <main+0x1f2>
      }
	  else{
		  PORTC = 0x01;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	85 bb       	out	0x15, r24	; 21
 270:	09 c0       	rjmp	.+18     	; 0x284 <main+0x1f2>
	  }
    }  
    else{
		PORTD = 0x40; // sending clk
 272:	80 e4       	ldi	r24, 0x40	; 64
 274:	82 bb       	out	0x12, r24	; 18
 276:	83 ef       	ldi	r24, 0xF3	; 243
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <main+0x1e8>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <main+0x1ee>
 280:	00 00       	nop
		_delay_ms(2);
		PORTD = 0x00;
 282:	12 ba       	out	0x12, r1	; 18
  
  counter = 0;
  
  int length = sizeof(instruction)/sizeof(unsigned int);
  
  while(counter < length)
 284:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__data_end>
 288:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <__data_end+0x1>
 28c:	84 34       	cpi	r24, 0x44	; 68
 28e:	91 05       	cpc	r25, r1
 290:	08 f4       	brcc	.+2      	; 0x294 <main+0x202>
 292:	25 cf       	rjmp	.-438    	; 0xde <main+0x4c>
  }
  
  //0x0F;
  //PORTD = 0xf0;

 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	c8 57       	subi	r28, 0x78	; 120
 29a:	df 4f       	sbci	r29, 0xFF	; 255
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	f8 94       	cli
 2a0:	de bf       	out	0x3e, r29	; 62
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	cd bf       	out	0x3d, r28	; 61
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <_exit>:
 2ac:	f8 94       	cli

000002ae <__stop_program>:
 2ae:	ff cf       	rjmp	.-2      	; 0x2ae <__stop_program>
